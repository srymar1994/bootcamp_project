{"version":3,"sources":["components/Layouts/Navigation/Navigation.js","components/Layouts/Footer/Footer.js","components/Layouts/Main/Main.js","components/Layouts/Bar/Bar.js","components/Layouts/About/About.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Navigation","selectedStyle","color","style","textDecoration","className","exact","to","activeStyle","Component","Footer","target","href","icon","faInstagram","faGithub","faLinkedin","Main","Bar","Shaker","props","handleOnClick","myRef","current","classList","toggle","state","React","createRef","ref","this","onClick","About","NotFound","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2YA0BeA,G,uLApBX,IAAMC,EAAgB,CAClBC,MAAO,WAELC,EAAQ,CAACC,eAAe,OAAQF,MAAO,oBAE7C,OACJ,yBAAKG,UAAW,cACR,yBAAKA,UAAW,aACZ,yBAAKA,UAAU,SACf,4BACG,gCAAK,kBAAC,IAAD,CAASF,MAAOA,EAAOG,OAAK,EAACC,GAAG,IAAIC,YAAaP,GAAjD,QAAL,KACA,gCAAK,kBAAC,IAAD,CAASE,MAAOA,EAAOI,GAAG,OAAOC,YAAaP,GAA9C,OAAL,KACA,gCAAK,kBAAC,IAAD,CAASE,MAAOA,EAAOI,GAAG,SAASC,YAAaP,GAAhD,SAAL,Y,GAdUQ,c,wBC0BVC,E,iLAtBP,OAEI,gCACI,yBAAKL,UAAU,oBACX,wDACA,6BACA,uBAAGM,OAAQ,SAAUC,KAAK,KACtB,kBAAC,IAAD,CAAiBP,UAAU,QAAQQ,KAAMC,OAE7C,uBAAGH,OAAQ,SAAUC,KAAK,wCACtB,kBAAC,IAAD,CAAiBP,UAAU,QAAQQ,KAAME,OAE7C,uBAAGJ,OAAQ,SAAUC,KAAK,KACtB,kBAAC,IAAD,CAAiBP,UAAU,QAAQQ,KAAMG,c,GAf5CP,aCYNQ,G,uLAVP,OACI,yBAAKZ,UAAU,QACX,yDACA,sDACA,gCAAQ,kBAAC,IAAD,CAASF,MANX,CAACC,eAAe,OAAQF,MAAO,sBAMNK,GAAG,QAA1B,mB,GARLE,cCDbS,G,uLAGE,OACI,yBAAKb,UAAW,OACZ,yBAAKA,UAAW,OACZ,oDACA,kBAAC,EAAD,OAEJ,yBAAKA,UAAW,mB,GATdI,cAgBZU,E,YACN,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAMNC,cAAgB,WACZ,EAAKC,MAAMC,QAAQC,UAAUC,OAAO,qBANxC,EAAKC,MAAQ,CACTrB,UAAW,WAEf,EAAKiB,MAAQK,IAAMC,YALJ,E,sEAYX,OAAO,yBAAKC,IAAKC,KAAKR,MAAOS,QAASD,KAAKT,cAAehB,UAAW,e,GAbxDI,aAkBNS,IC1BAc,G,uLANP,OACI,yBAAK3B,UAAU,0BAAf,a,GAHQI,cCQdwB,EAAW,kBAAM,uDAyBRC,MAtBf,WACI,OACJ,yBAAK7B,UAAU,cACP,kBAAC,IAAD,KAEQ,kBAAC,EAAD,MACJ,yBAAKA,UAAU,kBACP,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,OAAK,EAAC6B,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,OAAOC,UAAWlB,IAC9B,kBAAC,IAAD,CAAOiB,KAAK,SAASC,UAAWJ,IAChC,kBAAC,IAAD,CAAOI,UAAWH,MAI9B,kBAAC,EAAD,SClBQI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.47713904.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {NavLink} from \"react-router-dom\";\nimport \"./Navigation.scss\";\n\nclass Navigation extends Component {\nrender() {\n    const selectedStyle = {\n        color: \"#abf4fd\",\n};\n    const style = {textDecoration:\"none\", color: \"rgb(28, 63, 118)\"};\n    \n    return (\n<div className={\"navigation\"}>\n        <nav className={\"container\"}>\n            <div className=\"logo\"></div>\n            <ul>\n               <li> <NavLink style={style} exact to=\"/\" activeStyle={selectedStyle}>Main</NavLink> </li>\n               <li> <NavLink style={style} to=\"/bar\" activeStyle={selectedStyle}>Bar</NavLink > </li>\n               <li> <NavLink style={style} to=\"/about\" activeStyle={selectedStyle}>About</NavLink > </li>\n            </ul>\n         </nav>\n</div>\n    )\n  }\n}\n\nexport default Navigation;","import React,{Component} from 'react';\nimport \"./Footer.scss\"\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport {faInstagram, faLinkedin, faGithub} from '@fortawesome/fontawesome-free-brands'\n\nclass Footer extends Component{\n    render() {\n        return (\n\n            <footer>\n                <div className=\"container footer\">\n                    <span>&copy; Szymon Rymarowicz</span>\n                    <div>\n                    <a target={\"_blank\"} href='/'>\n                        <FontAwesomeIcon className=\"icons\" icon={faInstagram} />\n                    </a>\n                    <a target={\"_blank\"} href='https://github.com/szymon-rymarowicz'>\n                        <FontAwesomeIcon className=\"icons\" icon={faGithub} />\n                    </a>\n                    <a target={\"_blank\"} href='/' >\n                        <FontAwesomeIcon className=\"icons\" icon={faLinkedin} /></a>\n                    </div>\n                </div>\n\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React,{Component} from 'react';\nimport \"./Main.scss\";\nimport {NavLink} from \"react-router-dom\";\n\nclass Main extends Component {\n    render() {\n        const style = {textDecoration:\"none\", color: \"rgb(171, 244, 253)\"};\n\n        return (\n            <div className=\"main\">\n                <h1>Welcome in MyCoctail App!</h1>\n                <span>CREATE YOUR COCKTAIL</span>\n                <button><NavLink style={style} to=\"/bar\">GO TO BAR</NavLink ></button>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React,{Component} from 'react';\nimport \"./Bar.scss\";\n\nclass Bar extends Component {\n\n    render() {\n        return (\n            <div className={\"bar\"}>\n                <div className={\"box\"}>\n                    <h2>Click on the shaker!</h2>\n                    <Shaker />\n                </div>\n                <div className={\"bartender\"}></div>\n            </div>\n        )\n    }\n}\n\n\nclass Shaker extends Component {\nconstructor(props) {\n    super(props);\n    this.state = {\n        className: \"shaker1\"\n    };\n    this.myRef = React.createRef();\n}\n    handleOnClick = () => {\n        this.myRef.current.classList.toggle(\"shake-horizontal\");\n    };\n\n    render() {\n        return <div ref={this.myRef} onClick={this.handleOnClick} className={\"shaker\"}></div>\n    }\n}\n\n\nexport default Bar;","import React,{Component} from 'react';\nimport \"./About.scss\";\n\nclass About extends Component {\n    render() {\n        return (\n            <div className=\"About shake-horizontal\">About</div>\n        )\n    }\n}\n\nexport default About;","import React from 'react';\nimport './App.scss';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\n\nimport Navigation from \"../Layouts/Navigation/Navigation\";\nimport Footer from \"../Layouts/Footer/Footer\";\nimport Main from \"../Layouts/Main/Main\";\nimport Bar from \"../Layouts/Bar/Bar\";\nimport About from \"../Layouts/About/About\";\n\n\nconst NotFound = () => <h2>error 404 , not found!</h2>;\n\n\nfunction App() {\n    return (\n<div className=\"background\">\n        <HashRouter>\n\n                <Navigation/>\n            <div className=\"container page\">\n                    <Switch>\n\n                        <Route exact path=\"/\" component={Main}/>\n                        <Route path=\"/bar\" component={Bar}/>\n                        <Route path=\"/about\" component={About}/>\n                        <Route component={NotFound}/>\n\n                    </Switch>\n            </div>\n            <Footer />\n        </HashRouter>\n</div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}